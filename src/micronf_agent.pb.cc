// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: micronf_agent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "micronf_agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc_agent {

namespace {

const ::google::protobuf::Descriptor* CreateRingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Errno_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Errno_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeployConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeployConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_micronf_5fagent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_micronf_5fagent_2eproto() {
  protobuf_AddDesc_micronf_5fagent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "micronf_agent.proto");
  GOOGLE_CHECK(file != NULL);
  CreateRingRequest_descriptor_ = file->message_type(0);
  static const int CreateRingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRingRequest, name_),
  };
  CreateRingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateRingRequest_descriptor_,
      CreateRingRequest::default_instance_,
      CreateRingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateRingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRingRequest, _is_default_instance_));
  Errno_descriptor_ = file->message_type(1);
  static const int Errno_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Errno, err_),
  };
  Errno_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Errno_descriptor_,
      Errno::default_instance_,
      Errno_offsets_,
      -1,
      -1,
      -1,
      sizeof(Errno),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Errno, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Errno, _is_default_instance_));
  DeployConfig_descriptor_ = file->message_type(2);
  static const int DeployConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployConfig, config_),
  };
  DeployConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeployConfig_descriptor_,
      DeployConfig::default_instance_,
      DeployConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeployConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_micronf_5fagent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateRingRequest_descriptor_, &CreateRingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Errno_descriptor_, &Errno::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeployConfig_descriptor_, &DeployConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_micronf_5fagent_2eproto() {
  delete CreateRingRequest::default_instance_;
  delete CreateRingRequest_reflection_;
  delete Errno::default_instance_;
  delete Errno_reflection_;
  delete DeployConfig::default_instance_;
  delete DeployConfig_reflection_;
}

void protobuf_AddDesc_micronf_5fagent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_micronf_5fagent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023micronf_agent.proto\022\trpc_agent\"!\n\021Crea"
    "teRingRequest\022\014\n\004name\030\001 \001(\t\"\024\n\005Errno\022\013\n\003"
    "err\030\001 \001(\005\"\036\n\014DeployConfig\022\016\n\006config\030\001 \001("
    "\t2\217\001\n\003RPC\022A\n\017rpc_create_ring\022\034.rpc_agent"
    ".CreateRingRequest\032\020.rpc_agent.Errno\022E\n\030"
    "rpc_deploy_microservices\022\027.rpc_agent.Dep"
    "loyConfig\032\020.rpc_agent.Errnob\006proto3", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "micronf_agent.proto", &protobuf_RegisterTypes);
  CreateRingRequest::default_instance_ = new CreateRingRequest();
  Errno::default_instance_ = new Errno();
  DeployConfig::default_instance_ = new DeployConfig();
  CreateRingRequest::default_instance_->InitAsDefaultInstance();
  Errno::default_instance_->InitAsDefaultInstance();
  DeployConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_micronf_5fagent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_micronf_5fagent_2eproto {
  StaticDescriptorInitializer_micronf_5fagent_2eproto() {
    protobuf_AddDesc_micronf_5fagent_2eproto();
  }
} static_descriptor_initializer_micronf_5fagent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRingRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRingRequest::CreateRingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_agent.CreateRingRequest)
}

void CreateRingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateRingRequest::CreateRingRequest(const CreateRingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc_agent.CreateRingRequest)
}

void CreateRingRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateRingRequest::~CreateRingRequest() {
  // @@protoc_insertion_point(destructor:rpc_agent.CreateRingRequest)
  SharedDtor();
}

void CreateRingRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateRingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRingRequest_descriptor_;
}

const CreateRingRequest& CreateRingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_micronf_5fagent_2eproto();
  return *default_instance_;
}

CreateRingRequest* CreateRingRequest::default_instance_ = NULL;

CreateRingRequest* CreateRingRequest::New(::google::protobuf::Arena* arena) const {
  CreateRingRequest* n = new CreateRingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_agent.CreateRingRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateRingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc_agent.CreateRingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc_agent.CreateRingRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc_agent.CreateRingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc_agent.CreateRingRequest)
  return false;
#undef DO_
}

void CreateRingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc_agent.CreateRingRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc_agent.CreateRingRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc_agent.CreateRingRequest)
}

::google::protobuf::uint8* CreateRingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_agent.CreateRingRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc_agent.CreateRingRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc_agent.CreateRingRequest)
  return target;
}

int CreateRingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_agent.CreateRingRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_agent.CreateRingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateRingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_agent.CreateRingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_agent.CreateRingRequest)
    MergeFrom(*source);
  }
}

void CreateRingRequest::MergeFrom(const CreateRingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_agent.CreateRingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CreateRingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_agent.CreateRingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRingRequest::CopyFrom(const CreateRingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_agent.CreateRingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRingRequest::IsInitialized() const {

  return true;
}

void CreateRingRequest::Swap(CreateRingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRingRequest::InternalSwap(CreateRingRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRingRequest_descriptor_;
  metadata.reflection = CreateRingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRingRequest

// optional string name = 1;
void CreateRingRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRingRequest::name() const {
  // @@protoc_insertion_point(field_get:rpc_agent.CreateRingRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRingRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc_agent.CreateRingRequest.name)
}
 void CreateRingRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_agent.CreateRingRequest.name)
}
 void CreateRingRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_agent.CreateRingRequest.name)
}
 ::std::string* CreateRingRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc_agent.CreateRingRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRingRequest::release_name() {
  // @@protoc_insertion_point(field_release:rpc_agent.CreateRingRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRingRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpc_agent.CreateRingRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Errno::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Errno::Errno()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_agent.Errno)
}

void Errno::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Errno::Errno(const Errno& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc_agent.Errno)
}

void Errno::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  err_ = 0;
}

Errno::~Errno() {
  // @@protoc_insertion_point(destructor:rpc_agent.Errno)
  SharedDtor();
}

void Errno::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Errno::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Errno::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Errno_descriptor_;
}

const Errno& Errno::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_micronf_5fagent_2eproto();
  return *default_instance_;
}

Errno* Errno::default_instance_ = NULL;

Errno* Errno::New(::google::protobuf::Arena* arena) const {
  Errno* n = new Errno;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Errno::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_agent.Errno)
  err_ = 0;
}

bool Errno::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc_agent.Errno)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc_agent.Errno)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc_agent.Errno)
  return false;
#undef DO_
}

void Errno::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc_agent.Errno)
  // optional int32 err = 1;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc_agent.Errno)
}

::google::protobuf::uint8* Errno::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_agent.Errno)
  // optional int32 err = 1;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc_agent.Errno)
  return target;
}

int Errno::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_agent.Errno)
  int total_size = 0;

  // optional int32 err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Errno::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_agent.Errno)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Errno* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Errno>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_agent.Errno)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_agent.Errno)
    MergeFrom(*source);
  }
}

void Errno::MergeFrom(const Errno& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_agent.Errno)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.err() != 0) {
    set_err(from.err());
  }
}

void Errno::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_agent.Errno)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Errno::CopyFrom(const Errno& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_agent.Errno)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Errno::IsInitialized() const {

  return true;
}

void Errno::Swap(Errno* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Errno::InternalSwap(Errno* other) {
  std::swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Errno::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Errno_descriptor_;
  metadata.reflection = Errno_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Errno

// optional int32 err = 1;
void Errno::clear_err() {
  err_ = 0;
}
 ::google::protobuf::int32 Errno::err() const {
  // @@protoc_insertion_point(field_get:rpc_agent.Errno.err)
  return err_;
}
 void Errno::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:rpc_agent.Errno.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeployConfig::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeployConfig::DeployConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_agent.DeployConfig)
}

void DeployConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeployConfig::DeployConfig(const DeployConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc_agent.DeployConfig)
}

void DeployConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeployConfig::~DeployConfig() {
  // @@protoc_insertion_point(destructor:rpc_agent.DeployConfig)
  SharedDtor();
}

void DeployConfig::SharedDtor() {
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeployConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeployConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeployConfig_descriptor_;
}

const DeployConfig& DeployConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_micronf_5fagent_2eproto();
  return *default_instance_;
}

DeployConfig* DeployConfig::default_instance_ = NULL;

DeployConfig* DeployConfig::New(::google::protobuf::Arena* arena) const {
  DeployConfig* n = new DeployConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeployConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_agent.DeployConfig)
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeployConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc_agent.DeployConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc_agent.DeployConfig.config"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc_agent.DeployConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc_agent.DeployConfig)
  return false;
#undef DO_
}

void DeployConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc_agent.DeployConfig)
  // optional string config = 1;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc_agent.DeployConfig.config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc_agent.DeployConfig)
}

::google::protobuf::uint8* DeployConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_agent.DeployConfig)
  // optional string config = 1;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc_agent.DeployConfig.config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc_agent.DeployConfig)
  return target;
}

int DeployConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_agent.DeployConfig)
  int total_size = 0;

  // optional string config = 1;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeployConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_agent.DeployConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeployConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeployConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_agent.DeployConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_agent.DeployConfig)
    MergeFrom(*source);
  }
}

void DeployConfig::MergeFrom(const DeployConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_agent.DeployConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.config().size() > 0) {

    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
}

void DeployConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_agent.DeployConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeployConfig::CopyFrom(const DeployConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_agent.DeployConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployConfig::IsInitialized() const {

  return true;
}

void DeployConfig::Swap(DeployConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeployConfig::InternalSwap(DeployConfig* other) {
  config_.Swap(&other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeployConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeployConfig_descriptor_;
  metadata.reflection = DeployConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeployConfig

// optional string config = 1;
void DeployConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeployConfig::config() const {
  // @@protoc_insertion_point(field_get:rpc_agent.DeployConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeployConfig::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc_agent.DeployConfig.config)
}
 void DeployConfig::set_config(const char* value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_agent.DeployConfig.config)
}
 void DeployConfig::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_agent.DeployConfig.config)
}
 ::std::string* DeployConfig::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:rpc_agent.DeployConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeployConfig::release_config() {
  // @@protoc_insertion_point(field_release:rpc_agent.DeployConfig.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeployConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:rpc_agent.DeployConfig.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_agent

// @@protoc_insertion_point(global_scope)
