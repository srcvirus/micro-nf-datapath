// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: micronf_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "micronf_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micronf_config {

namespace {

const ::google::protobuf::Descriptor* Microservice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Microservice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Microservice_MicroServiceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Microservice_PortType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MicronfConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MicronfConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_micronf_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_micronf_5fconfig_2eproto() {
  protobuf_AddDesc_micronf_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "micronf_config.proto");
  GOOGLE_CHECK(file != NULL);
  Microservice_descriptor_ = file->message_type(0);
  static const int Microservice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, in_port_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, eg_port_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, in_port_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, eg_port_names_),
  };
  Microservice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Microservice_descriptor_,
      Microservice::default_instance_,
      Microservice_offsets_,
      -1,
      -1,
      -1,
      sizeof(Microservice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microservice, _is_default_instance_));
  Microservice_MicroServiceType_descriptor_ = Microservice_descriptor_->enum_type(0);
  Microservice_PortType_descriptor_ = Microservice_descriptor_->enum_type(1);
  MicronfConfig_descriptor_ = file->message_type(1);
  static const int MicronfConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicronfConfig, list_),
  };
  MicronfConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MicronfConfig_descriptor_,
      MicronfConfig::default_instance_,
      MicronfConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(MicronfConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicronfConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicronfConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_micronf_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Microservice_descriptor_, &Microservice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MicronfConfig_descriptor_, &MicronfConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_micronf_5fconfig_2eproto() {
  delete Microservice::default_instance_;
  delete Microservice_reflection_;
  delete MicronfConfig::default_instance_;
  delete MicronfConfig_reflection_;
}

void protobuf_AddDesc_micronf_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_micronf_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024micronf_config.proto\022\016micronf_config\"\373"
    "\003\n\014Microservice\022\n\n\002id\030\001 \001(\t\022;\n\004type\030\002 \001("
    "\0162-.micronf_config.Microservice.MicroSer"
    "viceType\022<\n\rin_port_types\030\003 \003(\0162%.micron"
    "f_config.Microservice.PortType\022<\n\reg_por"
    "t_types\030\004 \003(\0162%.micronf_config.Microserv"
    "ice.PortType\022\025\n\rin_port_names\030\005 \003(\t\022\025\n\re"
    "g_port_names\030\006 \003(\t\"=\n\020MicroServiceType\022\016"
    "\n\nCLASSIFIER\020\000\022\013\n\007COUNTER\020\001\022\014\n\010MODIFIER\020"
    "\002\"\270\001\n\010PortType\022\021\n\rNORMAL_EGRESS\020\000\022\021\n\rBRA"
    "NCH_EGRESS\020\001\022\027\n\023MARK_FORWARD_EGRESS\020\002\022\025\n"
    "\021SET_BITMAP_EGRESS\020\003\022\017\n\013COPY_EGRESS\020\004\022\016\n"
    "\nNIC_EGRESS\020\005\022\022\n\016NORMAL_INGRESS\020\n\022\020\n\014SYN"
    "C_INGRESS\020\013\022\017\n\013NIC_INGRESS\020\014\";\n\rMicronfC"
    "onfig\022*\n\004list\030\001 \003(\0132\034.micronf_config.Mic"
    "roserviceb\006proto3", 617);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "micronf_config.proto", &protobuf_RegisterTypes);
  Microservice::default_instance_ = new Microservice();
  MicronfConfig::default_instance_ = new MicronfConfig();
  Microservice::default_instance_->InitAsDefaultInstance();
  MicronfConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_micronf_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_micronf_5fconfig_2eproto {
  StaticDescriptorInitializer_micronf_5fconfig_2eproto() {
    protobuf_AddDesc_micronf_5fconfig_2eproto();
  }
} static_descriptor_initializer_micronf_5fconfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Microservice_MicroServiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Microservice_MicroServiceType_descriptor_;
}
bool Microservice_MicroServiceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Microservice_MicroServiceType Microservice::CLASSIFIER;
const Microservice_MicroServiceType Microservice::COUNTER;
const Microservice_MicroServiceType Microservice::MODIFIER;
const Microservice_MicroServiceType Microservice::MicroServiceType_MIN;
const Microservice_MicroServiceType Microservice::MicroServiceType_MAX;
const int Microservice::MicroServiceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Microservice_PortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Microservice_PortType_descriptor_;
}
bool Microservice_PortType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Microservice_PortType Microservice::NORMAL_EGRESS;
const Microservice_PortType Microservice::BRANCH_EGRESS;
const Microservice_PortType Microservice::MARK_FORWARD_EGRESS;
const Microservice_PortType Microservice::SET_BITMAP_EGRESS;
const Microservice_PortType Microservice::COPY_EGRESS;
const Microservice_PortType Microservice::NIC_EGRESS;
const Microservice_PortType Microservice::NORMAL_INGRESS;
const Microservice_PortType Microservice::SYNC_INGRESS;
const Microservice_PortType Microservice::NIC_INGRESS;
const Microservice_PortType Microservice::PortType_MIN;
const Microservice_PortType Microservice::PortType_MAX;
const int Microservice::PortType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Microservice::kIdFieldNumber;
const int Microservice::kTypeFieldNumber;
const int Microservice::kInPortTypesFieldNumber;
const int Microservice::kEgPortTypesFieldNumber;
const int Microservice::kInPortNamesFieldNumber;
const int Microservice::kEgPortNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Microservice::Microservice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:micronf_config.Microservice)
}

void Microservice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Microservice::Microservice(const Microservice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:micronf_config.Microservice)
}

void Microservice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Microservice::~Microservice() {
  // @@protoc_insertion_point(destructor:micronf_config.Microservice)
  SharedDtor();
}

void Microservice::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Microservice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Microservice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Microservice_descriptor_;
}

const Microservice& Microservice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_micronf_5fconfig_2eproto();
  return *default_instance_;
}

Microservice* Microservice::default_instance_ = NULL;

Microservice* Microservice::New(::google::protobuf::Arena* arena) const {
  Microservice* n = new Microservice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Microservice::Clear() {
// @@protoc_insertion_point(message_clear_start:micronf_config.Microservice)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  in_port_types_.Clear();
  eg_port_types_.Clear();
  in_port_names_.Clear();
  eg_port_names_.Clear();
}

bool Microservice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micronf_config.Microservice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "micronf_config.Microservice.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .micronf_config.Microservice.MicroServiceType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::micronf_config::Microservice_MicroServiceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_in_port_types;
        break;
      }

      // repeated .micronf_config.Microservice.PortType in_port_types = 3;
      case 3: {
        if (tag == 26) {
         parse_in_port_types:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_in_port_types(static_cast< ::micronf_config::Microservice_PortType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 24) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_in_port_types(static_cast< ::micronf_config::Microservice_PortType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eg_port_types;
        break;
      }

      // repeated .micronf_config.Microservice.PortType eg_port_types = 4;
      case 4: {
        if (tag == 34) {
         parse_eg_port_types:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_eg_port_types(static_cast< ::micronf_config::Microservice_PortType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_eg_port_types(static_cast< ::micronf_config::Microservice_PortType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_in_port_names;
        break;
      }

      // repeated string in_port_names = 5;
      case 5: {
        if (tag == 42) {
         parse_in_port_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in_port_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->in_port_names(this->in_port_names_size() - 1).data(),
            this->in_port_names(this->in_port_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "micronf_config.Microservice.in_port_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_in_port_names;
        if (input->ExpectTag(50)) goto parse_eg_port_names;
        break;
      }

      // repeated string eg_port_names = 6;
      case 6: {
        if (tag == 50) {
         parse_eg_port_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eg_port_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->eg_port_names(this->eg_port_names_size() - 1).data(),
            this->eg_port_names(this->eg_port_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "micronf_config.Microservice.eg_port_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_eg_port_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micronf_config.Microservice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micronf_config.Microservice)
  return false;
#undef DO_
}

void Microservice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micronf_config.Microservice)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "micronf_config.Microservice.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .micronf_config.Microservice.MicroServiceType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .micronf_config.Microservice.PortType in_port_types = 3;
  if (this->in_port_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_in_port_types_cached_byte_size_);
  }
  for (int i = 0; i < this->in_port_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->in_port_types(i), output);
  }

  // repeated .micronf_config.Microservice.PortType eg_port_types = 4;
  if (this->eg_port_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_eg_port_types_cached_byte_size_);
  }
  for (int i = 0; i < this->eg_port_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->eg_port_types(i), output);
  }

  // repeated string in_port_names = 5;
  for (int i = 0; i < this->in_port_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->in_port_names(i).data(), this->in_port_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "micronf_config.Microservice.in_port_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->in_port_names(i), output);
  }

  // repeated string eg_port_names = 6;
  for (int i = 0; i < this->eg_port_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->eg_port_names(i).data(), this->eg_port_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "micronf_config.Microservice.eg_port_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->eg_port_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:micronf_config.Microservice)
}

::google::protobuf::uint8* Microservice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micronf_config.Microservice)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "micronf_config.Microservice.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .micronf_config.Microservice.MicroServiceType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .micronf_config.Microservice.PortType in_port_types = 3;
  if (this->in_port_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _in_port_types_cached_byte_size_, target);
  }
  for (int i = 0; i < this->in_port_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->in_port_types(i), target);
  }

  // repeated .micronf_config.Microservice.PortType eg_port_types = 4;
  if (this->eg_port_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _eg_port_types_cached_byte_size_, target);
  }
  for (int i = 0; i < this->eg_port_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->eg_port_types(i), target);
  }

  // repeated string in_port_names = 5;
  for (int i = 0; i < this->in_port_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->in_port_names(i).data(), this->in_port_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "micronf_config.Microservice.in_port_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->in_port_names(i), target);
  }

  // repeated string eg_port_names = 6;
  for (int i = 0; i < this->eg_port_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->eg_port_names(i).data(), this->eg_port_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "micronf_config.Microservice.eg_port_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->eg_port_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:micronf_config.Microservice)
  return target;
}

int Microservice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:micronf_config.Microservice)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .micronf_config.Microservice.MicroServiceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .micronf_config.Microservice.PortType in_port_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->in_port_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->in_port_types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_port_types_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .micronf_config.Microservice.PortType eg_port_types = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->eg_port_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->eg_port_types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _eg_port_types_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string in_port_names = 5;
  total_size += 1 * this->in_port_names_size();
  for (int i = 0; i < this->in_port_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in_port_names(i));
  }

  // repeated string eg_port_names = 6;
  total_size += 1 * this->eg_port_names_size();
  for (int i = 0; i < this->eg_port_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eg_port_names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Microservice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micronf_config.Microservice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Microservice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Microservice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micronf_config.Microservice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micronf_config.Microservice)
    MergeFrom(*source);
  }
}

void Microservice::MergeFrom(const Microservice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micronf_config.Microservice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  in_port_types_.MergeFrom(from.in_port_types_);
  eg_port_types_.MergeFrom(from.eg_port_types_);
  in_port_names_.MergeFrom(from.in_port_names_);
  eg_port_names_.MergeFrom(from.eg_port_names_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Microservice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micronf_config.Microservice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Microservice::CopyFrom(const Microservice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micronf_config.Microservice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Microservice::IsInitialized() const {

  return true;
}

void Microservice::Swap(Microservice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Microservice::InternalSwap(Microservice* other) {
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  in_port_types_.UnsafeArenaSwap(&other->in_port_types_);
  eg_port_types_.UnsafeArenaSwap(&other->eg_port_types_);
  in_port_names_.UnsafeArenaSwap(&other->in_port_names_);
  eg_port_names_.UnsafeArenaSwap(&other->eg_port_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Microservice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Microservice_descriptor_;
  metadata.reflection = Microservice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Microservice

// optional string id = 1;
void Microservice::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Microservice::id() const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Microservice::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.id)
}
 void Microservice::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micronf_config.Microservice.id)
}
 void Microservice::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micronf_config.Microservice.id)
}
 ::std::string* Microservice::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:micronf_config.Microservice.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Microservice::release_id() {
  // @@protoc_insertion_point(field_release:micronf_config.Microservice.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Microservice::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micronf_config.Microservice.id)
}

// optional .micronf_config.Microservice.MicroServiceType type = 2;
void Microservice::clear_type() {
  type_ = 0;
}
 ::micronf_config::Microservice_MicroServiceType Microservice::type() const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.type)
  return static_cast< ::micronf_config::Microservice_MicroServiceType >(type_);
}
 void Microservice::set_type(::micronf_config::Microservice_MicroServiceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.type)
}

// repeated .micronf_config.Microservice.PortType in_port_types = 3;
int Microservice::in_port_types_size() const {
  return in_port_types_.size();
}
void Microservice::clear_in_port_types() {
  in_port_types_.Clear();
}
 ::micronf_config::Microservice_PortType Microservice::in_port_types(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.in_port_types)
  return static_cast< ::micronf_config::Microservice_PortType >(in_port_types_.Get(index));
}
 void Microservice::set_in_port_types(int index, ::micronf_config::Microservice_PortType value) {
  in_port_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.in_port_types)
}
 void Microservice::add_in_port_types(::micronf_config::Microservice_PortType value) {
  in_port_types_.Add(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.in_port_types)
}
 const ::google::protobuf::RepeatedField<int>&
Microservice::in_port_types() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.in_port_types)
  return in_port_types_;
}
 ::google::protobuf::RepeatedField<int>*
Microservice::mutable_in_port_types() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.in_port_types)
  return &in_port_types_;
}

// repeated .micronf_config.Microservice.PortType eg_port_types = 4;
int Microservice::eg_port_types_size() const {
  return eg_port_types_.size();
}
void Microservice::clear_eg_port_types() {
  eg_port_types_.Clear();
}
 ::micronf_config::Microservice_PortType Microservice::eg_port_types(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.eg_port_types)
  return static_cast< ::micronf_config::Microservice_PortType >(eg_port_types_.Get(index));
}
 void Microservice::set_eg_port_types(int index, ::micronf_config::Microservice_PortType value) {
  eg_port_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.eg_port_types)
}
 void Microservice::add_eg_port_types(::micronf_config::Microservice_PortType value) {
  eg_port_types_.Add(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.eg_port_types)
}
 const ::google::protobuf::RepeatedField<int>&
Microservice::eg_port_types() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.eg_port_types)
  return eg_port_types_;
}
 ::google::protobuf::RepeatedField<int>*
Microservice::mutable_eg_port_types() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.eg_port_types)
  return &eg_port_types_;
}

// repeated string in_port_names = 5;
int Microservice::in_port_names_size() const {
  return in_port_names_.size();
}
void Microservice::clear_in_port_names() {
  in_port_names_.Clear();
}
 const ::std::string& Microservice::in_port_names(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.in_port_names)
  return in_port_names_.Get(index);
}
 ::std::string* Microservice::mutable_in_port_names(int index) {
  // @@protoc_insertion_point(field_mutable:micronf_config.Microservice.in_port_names)
  return in_port_names_.Mutable(index);
}
 void Microservice::set_in_port_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.in_port_names)
  in_port_names_.Mutable(index)->assign(value);
}
 void Microservice::set_in_port_names(int index, const char* value) {
  in_port_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micronf_config.Microservice.in_port_names)
}
 void Microservice::set_in_port_names(int index, const char* value, size_t size) {
  in_port_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micronf_config.Microservice.in_port_names)
}
 ::std::string* Microservice::add_in_port_names() {
  // @@protoc_insertion_point(field_add_mutable:micronf_config.Microservice.in_port_names)
  return in_port_names_.Add();
}
 void Microservice::add_in_port_names(const ::std::string& value) {
  in_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.in_port_names)
}
 void Microservice::add_in_port_names(const char* value) {
  in_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micronf_config.Microservice.in_port_names)
}
 void Microservice::add_in_port_names(const char* value, size_t size) {
  in_port_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micronf_config.Microservice.in_port_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Microservice::in_port_names() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.in_port_names)
  return in_port_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Microservice::mutable_in_port_names() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.in_port_names)
  return &in_port_names_;
}

// repeated string eg_port_names = 6;
int Microservice::eg_port_names_size() const {
  return eg_port_names_.size();
}
void Microservice::clear_eg_port_names() {
  eg_port_names_.Clear();
}
 const ::std::string& Microservice::eg_port_names(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.eg_port_names)
  return eg_port_names_.Get(index);
}
 ::std::string* Microservice::mutable_eg_port_names(int index) {
  // @@protoc_insertion_point(field_mutable:micronf_config.Microservice.eg_port_names)
  return eg_port_names_.Mutable(index);
}
 void Microservice::set_eg_port_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.eg_port_names)
  eg_port_names_.Mutable(index)->assign(value);
}
 void Microservice::set_eg_port_names(int index, const char* value) {
  eg_port_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micronf_config.Microservice.eg_port_names)
}
 void Microservice::set_eg_port_names(int index, const char* value, size_t size) {
  eg_port_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micronf_config.Microservice.eg_port_names)
}
 ::std::string* Microservice::add_eg_port_names() {
  // @@protoc_insertion_point(field_add_mutable:micronf_config.Microservice.eg_port_names)
  return eg_port_names_.Add();
}
 void Microservice::add_eg_port_names(const ::std::string& value) {
  eg_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.eg_port_names)
}
 void Microservice::add_eg_port_names(const char* value) {
  eg_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micronf_config.Microservice.eg_port_names)
}
 void Microservice::add_eg_port_names(const char* value, size_t size) {
  eg_port_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micronf_config.Microservice.eg_port_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Microservice::eg_port_names() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.eg_port_names)
  return eg_port_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Microservice::mutable_eg_port_names() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.eg_port_names)
  return &eg_port_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MicronfConfig::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MicronfConfig::MicronfConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:micronf_config.MicronfConfig)
}

void MicronfConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MicronfConfig::MicronfConfig(const MicronfConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:micronf_config.MicronfConfig)
}

void MicronfConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MicronfConfig::~MicronfConfig() {
  // @@protoc_insertion_point(destructor:micronf_config.MicronfConfig)
  SharedDtor();
}

void MicronfConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MicronfConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MicronfConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MicronfConfig_descriptor_;
}

const MicronfConfig& MicronfConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_micronf_5fconfig_2eproto();
  return *default_instance_;
}

MicronfConfig* MicronfConfig::default_instance_ = NULL;

MicronfConfig* MicronfConfig::New(::google::protobuf::Arena* arena) const {
  MicronfConfig* n = new MicronfConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MicronfConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:micronf_config.MicronfConfig)
  list_.Clear();
}

bool MicronfConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micronf_config.MicronfConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .micronf_config.Microservice list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micronf_config.MicronfConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micronf_config.MicronfConfig)
  return false;
#undef DO_
}

void MicronfConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micronf_config.MicronfConfig)
  // repeated .micronf_config.Microservice list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:micronf_config.MicronfConfig)
}

::google::protobuf::uint8* MicronfConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micronf_config.MicronfConfig)
  // repeated .micronf_config.Microservice list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:micronf_config.MicronfConfig)
  return target;
}

int MicronfConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:micronf_config.MicronfConfig)
  int total_size = 0;

  // repeated .micronf_config.Microservice list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MicronfConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micronf_config.MicronfConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MicronfConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MicronfConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micronf_config.MicronfConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micronf_config.MicronfConfig)
    MergeFrom(*source);
  }
}

void MicronfConfig::MergeFrom(const MicronfConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micronf_config.MicronfConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  list_.MergeFrom(from.list_);
}

void MicronfConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micronf_config.MicronfConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicronfConfig::CopyFrom(const MicronfConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micronf_config.MicronfConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicronfConfig::IsInitialized() const {

  return true;
}

void MicronfConfig::Swap(MicronfConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MicronfConfig::InternalSwap(MicronfConfig* other) {
  list_.UnsafeArenaSwap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MicronfConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MicronfConfig_descriptor_;
  metadata.reflection = MicronfConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MicronfConfig

// repeated .micronf_config.Microservice list = 1;
int MicronfConfig::list_size() const {
  return list_.size();
}
void MicronfConfig::clear_list() {
  list_.Clear();
}
const ::micronf_config::Microservice& MicronfConfig::list(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.MicronfConfig.list)
  return list_.Get(index);
}
::micronf_config::Microservice* MicronfConfig::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micronf_config.MicronfConfig.list)
  return list_.Mutable(index);
}
::micronf_config::Microservice* MicronfConfig::add_list() {
  // @@protoc_insertion_point(field_add:micronf_config.MicronfConfig.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice >*
MicronfConfig::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.MicronfConfig.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice >&
MicronfConfig::list() const {
  // @@protoc_insertion_point(field_list:micronf_config.MicronfConfig.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micronf_config

// @@protoc_insertion_point(global_scope)
