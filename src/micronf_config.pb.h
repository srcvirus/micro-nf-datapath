// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: micronf_config.proto

#ifndef PROTOBUF_micronf_5fconfig_2eproto__INCLUDED
#define PROTOBUF_micronf_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace micronf_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_micronf_5fconfig_2eproto();
void protobuf_AssignDesc_micronf_5fconfig_2eproto();
void protobuf_ShutdownFile_micronf_5fconfig_2eproto();

class MicronfConfig;
class Microservice;

enum Microservice_MicroServiceType {
  Microservice_MicroServiceType_CLASSIFIER = 0,
  Microservice_MicroServiceType_COUNTER = 1,
  Microservice_MicroServiceType_MODIFIER = 2,
  Microservice_MicroServiceType_Microservice_MicroServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Microservice_MicroServiceType_Microservice_MicroServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Microservice_MicroServiceType_IsValid(int value);
const Microservice_MicroServiceType Microservice_MicroServiceType_MicroServiceType_MIN = Microservice_MicroServiceType_CLASSIFIER;
const Microservice_MicroServiceType Microservice_MicroServiceType_MicroServiceType_MAX = Microservice_MicroServiceType_MODIFIER;
const int Microservice_MicroServiceType_MicroServiceType_ARRAYSIZE = Microservice_MicroServiceType_MicroServiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Microservice_MicroServiceType_descriptor();
inline const ::std::string& Microservice_MicroServiceType_Name(Microservice_MicroServiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Microservice_MicroServiceType_descriptor(), value);
}
inline bool Microservice_MicroServiceType_Parse(
    const ::std::string& name, Microservice_MicroServiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Microservice_MicroServiceType>(
    Microservice_MicroServiceType_descriptor(), name, value);
}
enum Microservice_PortType {
  Microservice_PortType_NORMAL_EGRESS = 0,
  Microservice_PortType_BRANCH_EGRESS = 1,
  Microservice_PortType_MARK_FORWARD_EGRESS = 2,
  Microservice_PortType_SET_BITMAP_EGRESS = 3,
  Microservice_PortType_COPY_EGRESS = 4,
  Microservice_PortType_NIC_EGRESS = 5,
  Microservice_PortType_NORMAL_INGRESS = 10,
  Microservice_PortType_SYNC_INGRESS = 11,
  Microservice_PortType_NIC_INGRESS = 12,
  Microservice_PortType_Microservice_PortType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Microservice_PortType_Microservice_PortType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Microservice_PortType_IsValid(int value);
const Microservice_PortType Microservice_PortType_PortType_MIN = Microservice_PortType_NORMAL_EGRESS;
const Microservice_PortType Microservice_PortType_PortType_MAX = Microservice_PortType_NIC_INGRESS;
const int Microservice_PortType_PortType_ARRAYSIZE = Microservice_PortType_PortType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Microservice_PortType_descriptor();
inline const ::std::string& Microservice_PortType_Name(Microservice_PortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Microservice_PortType_descriptor(), value);
}
inline bool Microservice_PortType_Parse(
    const ::std::string& name, Microservice_PortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Microservice_PortType>(
    Microservice_PortType_descriptor(), name, value);
}
// ===================================================================

class Microservice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micronf_config.Microservice) */ {
 public:
  Microservice();
  virtual ~Microservice();

  Microservice(const Microservice& from);

  inline Microservice& operator=(const Microservice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Microservice& default_instance();

  void Swap(Microservice* other);

  // implements Message ----------------------------------------------

  inline Microservice* New() const { return New(NULL); }

  Microservice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Microservice& from);
  void MergeFrom(const Microservice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Microservice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Microservice_MicroServiceType MicroServiceType;
  static const MicroServiceType CLASSIFIER =
    Microservice_MicroServiceType_CLASSIFIER;
  static const MicroServiceType COUNTER =
    Microservice_MicroServiceType_COUNTER;
  static const MicroServiceType MODIFIER =
    Microservice_MicroServiceType_MODIFIER;
  static inline bool MicroServiceType_IsValid(int value) {
    return Microservice_MicroServiceType_IsValid(value);
  }
  static const MicroServiceType MicroServiceType_MIN =
    Microservice_MicroServiceType_MicroServiceType_MIN;
  static const MicroServiceType MicroServiceType_MAX =
    Microservice_MicroServiceType_MicroServiceType_MAX;
  static const int MicroServiceType_ARRAYSIZE =
    Microservice_MicroServiceType_MicroServiceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MicroServiceType_descriptor() {
    return Microservice_MicroServiceType_descriptor();
  }
  static inline const ::std::string& MicroServiceType_Name(MicroServiceType value) {
    return Microservice_MicroServiceType_Name(value);
  }
  static inline bool MicroServiceType_Parse(const ::std::string& name,
      MicroServiceType* value) {
    return Microservice_MicroServiceType_Parse(name, value);
  }

  typedef Microservice_PortType PortType;
  static const PortType NORMAL_EGRESS =
    Microservice_PortType_NORMAL_EGRESS;
  static const PortType BRANCH_EGRESS =
    Microservice_PortType_BRANCH_EGRESS;
  static const PortType MARK_FORWARD_EGRESS =
    Microservice_PortType_MARK_FORWARD_EGRESS;
  static const PortType SET_BITMAP_EGRESS =
    Microservice_PortType_SET_BITMAP_EGRESS;
  static const PortType COPY_EGRESS =
    Microservice_PortType_COPY_EGRESS;
  static const PortType NIC_EGRESS =
    Microservice_PortType_NIC_EGRESS;
  static const PortType NORMAL_INGRESS =
    Microservice_PortType_NORMAL_INGRESS;
  static const PortType SYNC_INGRESS =
    Microservice_PortType_SYNC_INGRESS;
  static const PortType NIC_INGRESS =
    Microservice_PortType_NIC_INGRESS;
  static inline bool PortType_IsValid(int value) {
    return Microservice_PortType_IsValid(value);
  }
  static const PortType PortType_MIN =
    Microservice_PortType_PortType_MIN;
  static const PortType PortType_MAX =
    Microservice_PortType_PortType_MAX;
  static const int PortType_ARRAYSIZE =
    Microservice_PortType_PortType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PortType_descriptor() {
    return Microservice_PortType_descriptor();
  }
  static inline const ::std::string& PortType_Name(PortType value) {
    return Microservice_PortType_Name(value);
  }
  static inline bool PortType_Parse(const ::std::string& name,
      PortType* value) {
    return Microservice_PortType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .micronf_config.Microservice.MicroServiceType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::micronf_config::Microservice_MicroServiceType type() const;
  void set_type(::micronf_config::Microservice_MicroServiceType value);

  // repeated .micronf_config.Microservice.PortType in_port_types = 3;
  int in_port_types_size() const;
  void clear_in_port_types();
  static const int kInPortTypesFieldNumber = 3;
  ::micronf_config::Microservice_PortType in_port_types(int index) const;
  void set_in_port_types(int index, ::micronf_config::Microservice_PortType value);
  void add_in_port_types(::micronf_config::Microservice_PortType value);
  const ::google::protobuf::RepeatedField<int>& in_port_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_in_port_types();

  // repeated .micronf_config.Microservice.PortType eg_port_types = 4;
  int eg_port_types_size() const;
  void clear_eg_port_types();
  static const int kEgPortTypesFieldNumber = 4;
  ::micronf_config::Microservice_PortType eg_port_types(int index) const;
  void set_eg_port_types(int index, ::micronf_config::Microservice_PortType value);
  void add_eg_port_types(::micronf_config::Microservice_PortType value);
  const ::google::protobuf::RepeatedField<int>& eg_port_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_eg_port_types();

  // repeated string in_port_names = 5;
  int in_port_names_size() const;
  void clear_in_port_names();
  static const int kInPortNamesFieldNumber = 5;
  const ::std::string& in_port_names(int index) const;
  ::std::string* mutable_in_port_names(int index);
  void set_in_port_names(int index, const ::std::string& value);
  void set_in_port_names(int index, const char* value);
  void set_in_port_names(int index, const char* value, size_t size);
  ::std::string* add_in_port_names();
  void add_in_port_names(const ::std::string& value);
  void add_in_port_names(const char* value);
  void add_in_port_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in_port_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in_port_names();

  // repeated string eg_port_names = 6;
  int eg_port_names_size() const;
  void clear_eg_port_names();
  static const int kEgPortNamesFieldNumber = 6;
  const ::std::string& eg_port_names(int index) const;
  ::std::string* mutable_eg_port_names(int index);
  void set_eg_port_names(int index, const ::std::string& value);
  void set_eg_port_names(int index, const char* value);
  void set_eg_port_names(int index, const char* value, size_t size);
  ::std::string* add_eg_port_names();
  void add_eg_port_names(const ::std::string& value);
  void add_eg_port_names(const char* value);
  void add_eg_port_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& eg_port_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_eg_port_names();

  // @@protoc_insertion_point(class_scope:micronf_config.Microservice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedField<int> in_port_types_;
  mutable int _in_port_types_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> eg_port_types_;
  mutable int _eg_port_types_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_port_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> eg_port_names_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_micronf_5fconfig_2eproto();
  friend void protobuf_AssignDesc_micronf_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_micronf_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Microservice* default_instance_;
};
// -------------------------------------------------------------------

class MicronfConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micronf_config.MicronfConfig) */ {
 public:
  MicronfConfig();
  virtual ~MicronfConfig();

  MicronfConfig(const MicronfConfig& from);

  inline MicronfConfig& operator=(const MicronfConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MicronfConfig& default_instance();

  void Swap(MicronfConfig* other);

  // implements Message ----------------------------------------------

  inline MicronfConfig* New() const { return New(NULL); }

  MicronfConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MicronfConfig& from);
  void MergeFrom(const MicronfConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MicronfConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micronf_config.Microservice list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::micronf_config::Microservice& list(int index) const;
  ::micronf_config::Microservice* mutable_list(int index);
  ::micronf_config::Microservice* add_list();
  ::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice >&
      list() const;

  // @@protoc_insertion_point(class_scope:micronf_config.MicronfConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice > list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_micronf_5fconfig_2eproto();
  friend void protobuf_AssignDesc_micronf_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_micronf_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static MicronfConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Microservice

// optional string id = 1;
inline void Microservice::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Microservice::id() const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Microservice::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.id)
}
inline void Microservice::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micronf_config.Microservice.id)
}
inline void Microservice::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micronf_config.Microservice.id)
}
inline ::std::string* Microservice::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:micronf_config.Microservice.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Microservice::release_id() {
  // @@protoc_insertion_point(field_release:micronf_config.Microservice.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Microservice::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micronf_config.Microservice.id)
}

// optional .micronf_config.Microservice.MicroServiceType type = 2;
inline void Microservice::clear_type() {
  type_ = 0;
}
inline ::micronf_config::Microservice_MicroServiceType Microservice::type() const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.type)
  return static_cast< ::micronf_config::Microservice_MicroServiceType >(type_);
}
inline void Microservice::set_type(::micronf_config::Microservice_MicroServiceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.type)
}

// repeated .micronf_config.Microservice.PortType in_port_types = 3;
inline int Microservice::in_port_types_size() const {
  return in_port_types_.size();
}
inline void Microservice::clear_in_port_types() {
  in_port_types_.Clear();
}
inline ::micronf_config::Microservice_PortType Microservice::in_port_types(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.in_port_types)
  return static_cast< ::micronf_config::Microservice_PortType >(in_port_types_.Get(index));
}
inline void Microservice::set_in_port_types(int index, ::micronf_config::Microservice_PortType value) {
  in_port_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.in_port_types)
}
inline void Microservice::add_in_port_types(::micronf_config::Microservice_PortType value) {
  in_port_types_.Add(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.in_port_types)
}
inline const ::google::protobuf::RepeatedField<int>&
Microservice::in_port_types() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.in_port_types)
  return in_port_types_;
}
inline ::google::protobuf::RepeatedField<int>*
Microservice::mutable_in_port_types() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.in_port_types)
  return &in_port_types_;
}

// repeated .micronf_config.Microservice.PortType eg_port_types = 4;
inline int Microservice::eg_port_types_size() const {
  return eg_port_types_.size();
}
inline void Microservice::clear_eg_port_types() {
  eg_port_types_.Clear();
}
inline ::micronf_config::Microservice_PortType Microservice::eg_port_types(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.eg_port_types)
  return static_cast< ::micronf_config::Microservice_PortType >(eg_port_types_.Get(index));
}
inline void Microservice::set_eg_port_types(int index, ::micronf_config::Microservice_PortType value) {
  eg_port_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.eg_port_types)
}
inline void Microservice::add_eg_port_types(::micronf_config::Microservice_PortType value) {
  eg_port_types_.Add(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.eg_port_types)
}
inline const ::google::protobuf::RepeatedField<int>&
Microservice::eg_port_types() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.eg_port_types)
  return eg_port_types_;
}
inline ::google::protobuf::RepeatedField<int>*
Microservice::mutable_eg_port_types() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.eg_port_types)
  return &eg_port_types_;
}

// repeated string in_port_names = 5;
inline int Microservice::in_port_names_size() const {
  return in_port_names_.size();
}
inline void Microservice::clear_in_port_names() {
  in_port_names_.Clear();
}
inline const ::std::string& Microservice::in_port_names(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.in_port_names)
  return in_port_names_.Get(index);
}
inline ::std::string* Microservice::mutable_in_port_names(int index) {
  // @@protoc_insertion_point(field_mutable:micronf_config.Microservice.in_port_names)
  return in_port_names_.Mutable(index);
}
inline void Microservice::set_in_port_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.in_port_names)
  in_port_names_.Mutable(index)->assign(value);
}
inline void Microservice::set_in_port_names(int index, const char* value) {
  in_port_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micronf_config.Microservice.in_port_names)
}
inline void Microservice::set_in_port_names(int index, const char* value, size_t size) {
  in_port_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micronf_config.Microservice.in_port_names)
}
inline ::std::string* Microservice::add_in_port_names() {
  // @@protoc_insertion_point(field_add_mutable:micronf_config.Microservice.in_port_names)
  return in_port_names_.Add();
}
inline void Microservice::add_in_port_names(const ::std::string& value) {
  in_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.in_port_names)
}
inline void Microservice::add_in_port_names(const char* value) {
  in_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micronf_config.Microservice.in_port_names)
}
inline void Microservice::add_in_port_names(const char* value, size_t size) {
  in_port_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micronf_config.Microservice.in_port_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Microservice::in_port_names() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.in_port_names)
  return in_port_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Microservice::mutable_in_port_names() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.in_port_names)
  return &in_port_names_;
}

// repeated string eg_port_names = 6;
inline int Microservice::eg_port_names_size() const {
  return eg_port_names_.size();
}
inline void Microservice::clear_eg_port_names() {
  eg_port_names_.Clear();
}
inline const ::std::string& Microservice::eg_port_names(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.Microservice.eg_port_names)
  return eg_port_names_.Get(index);
}
inline ::std::string* Microservice::mutable_eg_port_names(int index) {
  // @@protoc_insertion_point(field_mutable:micronf_config.Microservice.eg_port_names)
  return eg_port_names_.Mutable(index);
}
inline void Microservice::set_eg_port_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micronf_config.Microservice.eg_port_names)
  eg_port_names_.Mutable(index)->assign(value);
}
inline void Microservice::set_eg_port_names(int index, const char* value) {
  eg_port_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micronf_config.Microservice.eg_port_names)
}
inline void Microservice::set_eg_port_names(int index, const char* value, size_t size) {
  eg_port_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micronf_config.Microservice.eg_port_names)
}
inline ::std::string* Microservice::add_eg_port_names() {
  // @@protoc_insertion_point(field_add_mutable:micronf_config.Microservice.eg_port_names)
  return eg_port_names_.Add();
}
inline void Microservice::add_eg_port_names(const ::std::string& value) {
  eg_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micronf_config.Microservice.eg_port_names)
}
inline void Microservice::add_eg_port_names(const char* value) {
  eg_port_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micronf_config.Microservice.eg_port_names)
}
inline void Microservice::add_eg_port_names(const char* value, size_t size) {
  eg_port_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micronf_config.Microservice.eg_port_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Microservice::eg_port_names() const {
  // @@protoc_insertion_point(field_list:micronf_config.Microservice.eg_port_names)
  return eg_port_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Microservice::mutable_eg_port_names() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.Microservice.eg_port_names)
  return &eg_port_names_;
}

// -------------------------------------------------------------------

// MicronfConfig

// repeated .micronf_config.Microservice list = 1;
inline int MicronfConfig::list_size() const {
  return list_.size();
}
inline void MicronfConfig::clear_list() {
  list_.Clear();
}
inline const ::micronf_config::Microservice& MicronfConfig::list(int index) const {
  // @@protoc_insertion_point(field_get:micronf_config.MicronfConfig.list)
  return list_.Get(index);
}
inline ::micronf_config::Microservice* MicronfConfig::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micronf_config.MicronfConfig.list)
  return list_.Mutable(index);
}
inline ::micronf_config::Microservice* MicronfConfig::add_list() {
  // @@protoc_insertion_point(field_add:micronf_config.MicronfConfig.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice >*
MicronfConfig::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micronf_config.MicronfConfig.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micronf_config::Microservice >&
MicronfConfig::list() const {
  // @@protoc_insertion_point(field_list:micronf_config.MicronfConfig.list)
  return list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace micronf_config

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::micronf_config::Microservice_MicroServiceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::micronf_config::Microservice_MicroServiceType>() {
  return ::micronf_config::Microservice_MicroServiceType_descriptor();
}
template <> struct is_proto_enum< ::micronf_config::Microservice_PortType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::micronf_config::Microservice_PortType>() {
  return ::micronf_config::Microservice_PortType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_micronf_5fconfig_2eproto__INCLUDED
